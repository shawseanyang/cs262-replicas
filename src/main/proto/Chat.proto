syntax = "proto3";

package com.chatapp;

import "google/rpc/status.proto";

// A bidirectional streaming RPC
service ChatService {
  rpc chat(stream ChatMessage) returns (stream ChatMessage) {}
}

// Messages between the server and client come in the form of one of these messages
message ChatMessage {
  oneof message {
    // Requests
    CreateAccountRequest create_account_request = 1;
    LogInRequest log_in_request = 2;
    ListAccountsRequest list_accounts_request = 3;
    SendMessageRequest send_message_request = 4;
    LogOutRequest log_out_request = 5;
    DeleteAccountRequest delete_account_request = 6;
    DistributeMessageRequest distribute_message_request = 7;
    // Responses
    CreateAccountResponse create_account_response = 8;
    LogInResponse log_in_response = 9;
    ListAccountsResponse list_accounts_response = 10;
    SendMessageResponse send_message_response = 11;
    LogOutResponse log_out_response = 12;
    DeleteAccountResponse delete_account_response = 13;
    RejectedByFollower rejected_by_follower = 14;
  }
}

// Create an account with the username
message CreateAccountRequest {
  string username = 1;
}

// The server responds with a status
message CreateAccountResponse {
  google.rpc.Status status = 1;
}

// Login with the username
message LogInRequest {
  string username = 1;
}

// The server responds with a status
message LogInResponse {
  google.rpc.Status status = 1;
}

// List all accounts that match the pattern
message ListAccountsRequest {
  string pattern = 1;
}

// The server responds with a list of matching account usernames
message ListAccountsResponse {
  repeated string accounts = 2;
}

// Send a message to the recipient from the current logged in user (must be logged in)
message SendMessageRequest {
  string recipient = 1;
  string message = 2;
}

// The server responds with a status
message SendMessageResponse {
  google.rpc.Status status = 1;
}

// Log out of the current account (must be logged in)
message LogOutRequest {}

// The server responds with a status
message LogOutResponse {
  google.rpc.Status status = 1;
}

// Delete the account with the username (anybody can delete any account)
message DeleteAccountRequest {
  string username = 1;
}

// The server responds with a status
message DeleteAccountResponse {
  google.rpc.Status status = 1;
}

// The server uses this to send messages to the client
message DistributeMessageRequest {
  string sender = 1;
  string message = 2;
}

// This message indicates that the request was rejected because the server that was contacted is a follower and not a leader and only leaders can respond to clients
message RejectedByFollower {}